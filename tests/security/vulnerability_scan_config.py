"""
Vulnerability scanning configuration for LLMOptimizer.
"""

from typing import Dict, List, Any
from dataclasses import dataclass, field
import json
import yaml


@dataclass
class DependencyCheckConfig:
    """Configuration for dependency vulnerability scanning."""
    
    # OWASP Dependency Check settings
    owasp_dc_config: Dict[str, Any] = field(default_factory=lambda: {
        'project_name': 'LLMOptimizer',
        'scan_path': '.',
        'output_format': ['JSON', 'HTML', 'JUNIT'],
        'output_directory': 'security-reports/dependency-check',
        'suppression_file': 'dependency-check-suppressions.xml',
        'fail_on_cvss': 7,  # Fail build on CVSS score >= 7
        'enable_experimental': True,
        'enable_retired': True,
        'analyzers': {
            'python_distribution_analyzer': True,
            'python_package_analyzer': True,
            'pip_analyzer': True,
            'pipfile_analyzer': True,
            'poetry_analyzer': True,
            'autoconf_analyzer': False,
            'cmake_analyzer': False,
            'node_package_analyzer': True,
            'node_audit_analyzer': True,
            'retirejs_analyzer': True,
            'golang_mod_analyzer': True,
            'golang_dep_analyzer': True,
            'ruby_gemspec_analyzer': False,
            'ruby_bundler_analyzer': False
        },
        'data': {
            'directory': './dependency-check-data',
            'driver_name': 'org.postgresql.Driver',
            'connection_string': 'jdbc:postgresql://localhost:5432/dependency_check',
            'username': 'dc_user',
            'password': '${DC_DB_PASSWORD}'
        },
        'proxy': {
            'server': '${PROXY_SERVER}',
            'port': '${PROXY_PORT}',
            'username': '${PROXY_USERNAME}',
            'password': '${PROXY_PASSWORD}'
        }
    })
    
    # Safety (Python-specific) configuration
    safety_config: Dict[str, Any] = field(default_factory=lambda: {
        'check': {
            'ignore_ids': [],  # CVE IDs to ignore
            'ignore_packages': [],  # Package names to ignore
            'proxy': '${HTTPS_PROXY}',
            'db_mirror': 'https://pyup.io/aws/safety/free/',
            'cached': True,
            'cache_valid_seconds': 3600
        },
        'output': {
            'format': 'json',
            'full_report': True
        }
    })
    
    # npm audit configuration
    npm_audit_config: Dict[str, Any] = field(default_factory=lambda: {
        'audit_level': 'moderate',  # low, moderate, high, critical
        'production_only': False,
        'fix': False,  # Don't auto-fix in CI
        'force': False,
        'output': 'json'
    })
    
    # Snyk configuration
    snyk_config: Dict[str, Any] = field(default_factory=lambda: {
        'severity_threshold': 'medium',
        'fail_on': 'all',  # all, upgradable, patchable
        'test': {
            'all_projects': True,
            'detection_depth': 6,
            'exclude': [
                'test/**',
                'tests/**',
                'spec/**',
                '__tests__/**'
            ],
            'prune_repeated_subdependencies': True,
            'print_deps': True,
            'remote_repo_url': 'https://github.com/llmoptimizer/llmoptimizer'
        },
        'monitor': {
            'project_name': 'LLMOptimizer',
            'org': 'llmoptimizer',
            'project_environment': [
                'production',
                'development'
            ],
            'project_lifecycle': [
                'production',
                'development'
            ],
            'project_business_criticality': [
                'critical',
                'high'
            ],
            'tags': [
                'app=llmoptimizer',
                'team=security'
            ]
        }
    })


@dataclass
class StaticAnalysisConfig:
    """Configuration for static code analysis."""
    
    # Bandit (Python) configuration
    bandit_config: Dict[str, Any] = field(default_factory=lambda: {
        'skips': [
            'B101',  # assert_used - OK in tests
            'B601',  # paramiko_calls - False positives
        ],
        'tests': [
            'B201',  # flask_debug_true
            'B301',  # pickle
            'B302',  # marshal
            'B303',  # md5
            'B304',  # des
            'B305',  # cipher
            'B306',  # mktemp_q
            'B307',  # eval
            'B308',  # mark_safe
            'B309',  # httpsconnection
            'B310',  # urllib_urlopen
            'B311',  # random
            'B312',  # telnetlib
            'B313',  # xml_bad_cElementTree
            'B314',  # xml_bad_ElementTree
            'B315',  # xml_bad_expatreader
            'B316',  # xml_bad_expatbuilder
            'B317',  # xml_bad_sax
            'B318',  # xml_bad_minidom
            'B319',  # xml_bad_pulldom
            'B320',  # xml_bad_etree
            'B321',  # ftplib
            'B322',  # input
            'B323',  # unverified_context
            'B324',  # hashlib_new_insecure_functions
            'B325',  # tempnam
            'B401',  # import_telnetlib
            'B402',  # import_ftplib
            'B403',  # import_pickle
            'B404',  # import_subprocess
            'B405',  # import_xml_etree
            'B406',  # import_xml_sax
            'B407',  # import_xml_expat
            'B408',  # import_xml_minidom
            'B409',  # import_xml_pulldom
            'B410',  # import_lxml
            'B411',  # import_xmlrpclib
            'B412',  # import_httpoxy
            'B413',  # import_pycrypto
            'B501',  # request_with_no_cert_validation
            'B502',  # ssl_with_bad_version
            'B503',  # ssl_with_bad_defaults
            'B504',  # ssl_with_no_version
            'B505',  # weak_cryptographic_key
            'B506',  # yaml_load
            'B507',  # ssh_no_host_key_verification
            'B601',  # paramiko_calls
            'B602',  # subprocess_popen_with_shell_equals_true
            'B603',  # subprocess_without_shell_equals_true
            'B604',  # any_other_function_with_shell_equals_true
            'B605',  # start_process_with_a_shell
            'B606',  # start_process_with_no_shell
            'B607',  # start_process_with_partial_path
            'B608',  # hardcoded_sql_expressions
            'B609',  # linux_commands_wildcard_injection
            'B610',  # django_extra_used
            'B611',  # django_rawsql_used
            'B701',  # jinja2_autoescape_false
            'B702',  # use_of_mako_templates
            'B703',  # django_mark_safe
        ],
        'exclude_dirs': [
            '/tests/',
            '/test/',
            '/venv/',
            '/.venv/',
            '/node_modules/',
            '/.git/',
            '/__pycache__/',
            '/build/',
            '/dist/'
        ],
        'severity': {
            'HIGH': {
                'confidence': 'HIGH'
            },
            'MEDIUM': {
                'confidence': 'MEDIUM'
            },
            'LOW': {
                'confidence': 'LOW'
            }
        }
    })
    
    # Semgrep configuration
    semgrep_config: Dict[str, Any] = field(default_factory=lambda: {
        'rules': [
            'p/security-audit',
            'p/python',
            'p/javascript',
            'p/typescript',
            'p/react',
            'p/django',
            'p/flask',
            'p/jwt',
            'p/sql-injection',
            'p/xss',
            'p/command-injection',
            'p/path-traversal',
            'p/insecure-deserialization',
            'p/secrets',
            'p/owasp-top-ten'
        ],
        'exclude': [
            'tests/',
            'test/',
            '*.test.js',
            '*.test.ts',
            '*.spec.js',
            '*.spec.ts',
            'node_modules/',
            'venv/',
            '.venv/',
            'build/',
            'dist/',
            'coverage/',
            '.git/'
        ],
        'output': 'json',
        'metrics': 'on',
        'max_memory': 4096,
        'timeout': 300,
        'jobs': 4,
        'severity': [
            'ERROR',
            'WARNING'
        ]
    })
    
    # CodeQL configuration
    codeql_config: Dict[str, Any] = field(default_factory=lambda: {
        'languages': ['python', 'javascript', 'typescript'],
        'queries': [
            'security-and-quality',
            'security-extended',
            'security-experimental'
        ],
        'path_filters': {
            'exclude': [
                'tests/**',
                'test/**',
                '**/node_modules/**',
                '**/venv/**',
                '**/.venv/**',
                '**/vendor/**',
                '**/third_party/**',
                '**/*.min.js',
                '**/*.min.css',
                '**/build/**',
                '**/dist/**'
            ]
        },
        'query_filters': {
            'exclude': {
                'id': [
                    'js/unused-local-variable',
                    'py/unused-local-variable',
                    'py/unused-import'
                ],
                'tags': [
                    'maintainability',
                    'readability'
                ]
            },
            'include': {
                'tags': [
                    'security',
                    'correctness',
                    'reliability'
                ]
            }
        }
    })


@dataclass
class DynamicAnalysisConfig:
    """Configuration for dynamic security analysis."""
    
    # OWASP ZAP configuration (detailed config in zap_config.yaml)
    zap_config: Dict[str, Any] = field(default_factory=lambda: {
        'api_key': '${ZAP_API_KEY}',
        'proxy': {
            'host': 'localhost',
            'port': 8080
        },
        'spider': {
            'max_duration': 60,
            'max_depth': 10,
            'max_children': 20,
            'thread_count': 10
        },
        'active_scan': {
            'max_duration': 120,
            'thread_per_host': 5,
            'delay_in_ms': 20,
            'handle_anti_csrf_tokens': True,
            'policy': 'API_Security_Policy'
        },
        'passive_scan': {
            'max_alerts_per_rule': 10,
            'scan_only_in_scope': True
        }
    })
    
    # Burp Suite configuration
    burp_config: Dict[str, Any] = field(default_factory=lambda: {
        'project_file': 'llmoptimizer.burp',
        'config_file': 'burp_config.json',
        'extensions': [
            'software.coeo.burp.extensions.co2',
            'burp.extensions.sql_mapper',
            'burp.extensions.xss_validator',
            'burp.extensions.csrf_scanner'
        ],
        'scan_config': {
            'crawl': {
                'max_link_depth': 10,
                'max_crawl_time': 3600,
                'crawl_optimization': 'fastest',
                'never_stop_crawling': False
            },
            'audit': {
                'max_audit_time': 7200,
                'audit_optimization': 'deep',
                'issues_to_check': 'all',
                'skip_static_resources': True
            }
        }
    })
    
    # Nikto configuration
    nikto_config: Dict[str, Any] = field(default_factory=lambda: {
        'tuning': '123456789',  # All test types
        'output_format': 'json',
        'plugins': [
            'ssl',
            'headers',
            'cookies',
            'robots',
            'outdated',
            'httpoptions',
            'cgi',
            'paths',
            'auth'
        ],
        'timeout': 10,
        'max_time': 3600,
        'user_agent': 'LLMOptimizer-Security-Scanner/1.0'
    })


@dataclass
class ContainerScanConfig:
    """Configuration for container security scanning."""
    
    # Trivy configuration
    trivy_config: Dict[str, Any] = field(default_factory=lambda: {
        'scan_type': 'comprehensive',
        'scanners': [
            'vuln',
            'config',
            'secret',
            'license'
        ],
        'severity': [
            'CRITICAL',
            'HIGH',
            'MEDIUM',
            'LOW'
        ],
        'ignore_unfixed': False,
        'format': 'json',
        'template': '@contrib/sarif.tpl',
        'db_repository': 'ghcr.io/aquasecurity/trivy-db',
        'cache_dir': '.trivy_cache',
        'timeout': '10m',
        'skip_files': [
            '*.test.js',
            '*.spec.ts',
            'test/*',
            'tests/*'
        ],
        'skip_dirs': [
            'node_modules',
            'vendor',
            '.git'
        ],
        'exit_code': 1,
        'exit_on_eol': 1,
        'config_policy': [
            'policies/docker-cis.rego',
            'policies/k8s-cis.rego'
        ]
    })
    
    # Grype configuration
    grype_config: Dict[str, Any] = field(default_factory=lambda: {
        'scope': 'all-layers',
        'fail_on_severity': 'high',
        'output': 'json',
        'db': {
            'auto_update': True,
            'update_url': 'https://toolbox-data.anchore.io/grype/databases/listing.json',
            'cache_dir': '.grype/db',
            'validate_age': True,
            'max_allowed_built_age': '5d'
        },
        'ignore': [
            {
                'vulnerability': 'CVE-2023-12345',
                'reason': 'False positive - not applicable to our usage'
            }
        ],
        'registry': {
            'insecure_skip_tls_verify': False,
            'insecure_use_http': False,
            'auth': []
        }
    })
    
    # Docker Bench Security configuration
    docker_bench_config: Dict[str, Any] = field(default_factory=lambda: {
        'checks': [
            '1.1.1',  # Ensure a separate partition for containers
            '2.1',    # Restrict network traffic between containers
            '2.2',    # Set the logging level
            '4.1',    # Ensure a user for the container has been created
            '4.2',    # Ensure that containers use trusted base images
            '4.5',    # Ensure Content trust for Docker is Enabled
            '5.1',    # Verify AppArmor Profile, if applicable
            '5.2',    # Verify SELinux security options, if applicable
            '5.3',    # Restrict Linux Kernel Capabilities within containers
            '5.4',    # Do not use privileged containers
            '5.7',    # Do not map privileged ports within containers
            '5.9',    # Do not share the host's network namespace
            '5.10',   # Limit memory usage for container
            '5.11',   # Set container CPU priority appropriately
            '5.12',   # Mount container's root filesystem as read only
            '5.14',   # Set 'on-failure' container restart policy to '5'
            '5.25',   # Restrict container from acquiring additional privileges
            '5.28'    # Use PIDs cgroup limit
        ],
        'include_test_output': True,
        'include_warnings': True,
        'output_format': 'json'
    })


@dataclass
class ComplianceConfig:
    """Configuration for compliance scanning."""
    
    # CIS Benchmark scanning
    cis_config: Dict[str, Any] = field(default_factory=lambda: {
        'benchmarks': [
            'CIS_Docker_Benchmark_v1.4.0',
            'CIS_Kubernetes_Benchmark_v1.7.0',
            'CIS_PostgreSQL_13_Benchmark_v1.0.0',
            'CIS_MongoDB_4.4_Benchmark_v1.0.0',
            'CIS_Redis_Benchmark_v1.0.0',
            'CIS_NGINX_Benchmark_v2.0.0',
            'CIS_Python_Application_Security_v1.0.0'
        ],
        'profile': 'Level 2',  # Level 1 or Level 2
        'exclude_checks': [],
        'report_format': 'json',
        'fail_on_critical': True
    })
    
    # OWASP ASVS configuration
    asvs_config: Dict[str, Any] = field(default_factory=lambda: {
        'level': 3,  # 1, 2, or 3
        'version': '4.0.3',
        'requirements': {
            'V1': True,   # Architecture
            'V2': True,   # Authentication
            'V3': True,   # Session Management
            'V4': True,   # Access Control
            'V5': True,   # Validation
            'V6': True,   # Cryptography
            'V7': True,   # Error Handling
            'V8': True,   # Data Protection
            'V9': True,   # Communication
            'V10': True,  # Malicious Code
            'V11': True,  # Business Logic
            'V12': True,  # Files and Resources
            'V13': True,  # API
            'V14': True   # Configuration
        }
    })
    
    # PCI DSS scanning configuration
    pci_dss_config: Dict[str, Any] = field(default_factory=lambda: {
        'version': '4.0',
        'scope': {
            'cardholder_data_environment': False,
            'connected_systems': True,
            'segmentation_validation': True
        },
        'requirements': {
            'network_security': True,
            'data_protection': True,
            'vulnerability_management': True,
            'access_control': True,
            'monitoring': True,
            'security_policies': True
        },
        'scan_frequency': 'quarterly',
        'report_type': 'self_assessment'
    })


class SecurityScanOrchestrator:
    """Orchestrates all security scanning configurations."""
    
    def __init__(self):
        self.dependency_config = DependencyCheckConfig()
        self.static_analysis_config = StaticAnalysisConfig()
        self.dynamic_analysis_config = DynamicAnalysisConfig()
        self.container_scan_config = ContainerScanConfig()
        self.compliance_config = ComplianceConfig()
    
    def generate_github_workflow(self) -> str:
        """Generate GitHub Actions workflow for security scanning."""
        workflow = {
            'name': 'Security Scanning',
            'on': {
                'push': {
                    'branches': ['main', 'develop']
                },
                'pull_request': {
                    'branches': ['main']
                },
                'schedule': [
                    {'cron': '0 2 * * *'}  # Daily at 2 AM
                ]
            },
            'jobs': {
                'dependency-check': {
                    'runs-on': 'ubuntu-latest',
                    'steps': [
                        {'uses': 'actions/checkout@v3'},
                        {'name': 'Run OWASP Dependency Check',
                         'uses': 'dependency-check/Dependency-Check_Action@main',
                         'with': self.dependency_config.owasp_dc_config},
                        {'name': 'Run Safety Check',
                         'run': 'pip install safety && safety check --json > safety-report.json'},
                        {'name': 'Upload reports',
                         'uses': 'actions/upload-artifact@v3',
                         'with': {
                             'name': 'dependency-reports',
                             'path': 'security-reports/'
                         }}
                    ]
                },
                'static-analysis': {
                    'runs-on': 'ubuntu-latest',
                    'steps': [
                        {'uses': 'actions/checkout@v3'},
                        {'name': 'Run Bandit',
                         'run': f'pip install bandit && bandit -r . -f json -o bandit-report.json'},
                        {'name': 'Run Semgrep',
                         'uses': 'returntocorp/semgrep-action@v1',
                         'with': {
                             'config': ' '.join(self.static_analysis_config.semgrep_config['rules'])
                         }},
                        {'name': 'Initialize CodeQL',
                         'uses': 'github/codeql-action/init@v2',
                         'with': {
                             'languages': ','.join(self.static_analysis_config.codeql_config['languages'])
                         }},
                        {'name': 'Autobuild',
                         'uses': 'github/codeql-action/autobuild@v2'},
                        {'name': 'Perform CodeQL Analysis',
                         'uses': 'github/codeql-action/analyze@v2'}
                    ]
                },
                'container-security': {
                    'runs-on': 'ubuntu-latest',
                    'steps': [
                        {'uses': 'actions/checkout@v3'},
                        {'name': 'Run Trivy vulnerability scanner',
                         'uses': 'aquasecurity/trivy-action@master',
                         'with': {
                             'scan-type': 'fs',
                             'ignore-unfixed': str(self.container_scan_config.trivy_config['ignore_unfixed']).lower(),
                             'format': 'sarif',
                             'output': 'trivy-results.sarif'
                         }},
                        {'name': 'Upload Trivy scan results',
                         'uses': 'github/codeql-action/upload-sarif@v2',
                         'with': {
                             'sarif_file': 'trivy-results.sarif'
                         }}
                    ]
                }
            }
        }
        
        return yaml.dump(workflow, default_flow_style=False)
    
    def generate_gitlab_ci(self) -> str:
        """Generate GitLab CI configuration for security scanning."""
        config = {
            'include': [
                {'template': 'Security/Dependency-Scanning.gitlab-ci.yml'},
                {'template': 'Security/SAST.gitlab-ci.yml'},
                {'template': 'Security/Container-Scanning.gitlab-ci.yml'},
                {'template': 'Security/DAST.gitlab-ci.yml'}
            ],
            'stages': ['test', 'security', 'report'],
            'variables': {
                'SECURE_LOG_LEVEL': 'info',
                'DS_EXCLUDED_PATHS': 'tests/,test/',
                'SAST_EXCLUDED_PATHS': 'tests/,test/',
                'CONTAINER_SCANNING_DISABLED': 'false',
                'DAST_WEBSITE': '$STAGING_URL'
            },
            'dependency-check-python': {
                'stage': 'security',
                'image': 'python:3.10',
                'script': [
                    'pip install safety',
                    'safety check --json > dependency-report.json'
                ],
                'artifacts': {
                    'reports': {
                        'dependency_scanning': 'dependency-report.json'
                    }
                }
            },
            'bandit-sast': {
                'stage': 'security',
                'image': 'python:3.10',
                'script': [
                    'pip install bandit',
                    'bandit -r . -f json -o bandit-report.json'
                ],
                'artifacts': {
                    'reports': {
                        'sast': 'bandit-report.json'
                    }
                }
            }
        }
        
        return yaml.dump(config, default_flow_style=False)
    
    def export_configurations(self, output_dir: str = 'security-configs'):
        """Export all security scanning configurations."""
        import os
        os.makedirs(output_dir, exist_ok=True)
        
        # Export dependency check config
        with open(f'{output_dir}/dependency-check-config.json', 'w') as f:
            json.dump(self.dependency_config.owasp_dc_config, f, indent=2)
        
        # Export bandit config
        with open(f'{output_dir}/.bandit', 'w') as f:
            yaml.dump({'skips': self.dependency_config.bandit_config['skips'],
                      'tests': self.dependency_config.bandit_config['tests']}, f)
        
        # Export semgrep config
        with open(f'{output_dir}/.semgrep.yml', 'w') as f:
            yaml.dump({'rules': self.static_analysis_config.semgrep_config['rules']}, f)
        
        # Export trivy config
        with open(f'{output_dir}/.trivy.yaml', 'w') as f:
            yaml.dump(self.container_scan_config.trivy_config, f)
        
        # Export GitHub workflow
        with open(f'{output_dir}/security-scan.yml', 'w') as f:
            f.write(self.generate_github_workflow())
        
        # Export GitLab CI
        with open(f'{output_dir}/.gitlab-ci-security.yml', 'w') as f:
            f.write(self.generate_gitlab_ci())


if __name__ == '__main__':
    orchestrator = SecurityScanOrchestrator()
    orchestrator.export_configurations()