name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/llmoptimizer

jobs:
  # Test Go API Gateway
  test-api-gateway:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api-gateway
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run linting
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: api-gateway

  # Test Python Services
  test-python-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, content-service, analytics-service, ml-service]
    defaults:
      run:
        working-directory: ./${{ matrix.service }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black isort flake8
    
    - name: Run linting
      run: |
        black --check .
        isort --check-only .
        flake8 .
    
    - name: Run tests
      run: |
        pytest --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.service }}

  # Build and push Docker images
  build-and-push:
    needs: [test-api-gateway, test-python-services]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [api-gateway, auth-service, content-service, analytics-service, ml-service]
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Kubernetes (staging)
  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
    
    - name: Update image tags
      run: |
        for service in api-gateway auth-service content-service analytics-service ml-service; do
          kubectl set image deployment/$service $service=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/$service:sha-${GITHUB_SHA:0:7} -n llmoptimizer-staging
        done
    
    - name: Wait for rollout
      run: |
        for service in api-gateway auth-service content-service analytics-service ml-service; do
          kubectl rollout status deployment/$service -n llmoptimizer-staging
        done

  # Deploy to Kubernetes (production)
  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
    
    - name: Update image tags
      run: |
        for service in api-gateway auth-service content-service analytics-service ml-service; do
          kubectl set image deployment/$service $service=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/$service:sha-${GITHUB_SHA:0:7} -n llmoptimizer
        done
    
    - name: Wait for rollout
      run: |
        for service in api-gateway auth-service content-service analytics-service ml-service; do
          kubectl rollout status deployment/$service -n llmoptimizer
        done
    
    - name: Run smoke tests
      run: |
        # Add your smoke test scripts here
        echo "Running smoke tests..."