#!/bin/bash

# init-dev-env.sh - Initialize complete development environment for LLMOptimizer
# This script sets up the full development stack including databases, services, and tools

set -euo pipefail

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
NAMESPACE="llmoptimizer-dev"
REGISTRY="localhost:5000"

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check if kubectl is available and cluster is running
    if ! kubectl cluster-info &> /dev/null; then
        log_error "Kubernetes cluster is not running. Please run './setup-local-k8s.sh' first"
        exit 1
    fi
    
    # Check if Docker is running
    if ! docker info &> /dev/null; then
        log_error "Docker is not running. Please start Docker Desktop."
        exit 1
    fi
    
    # Check if we're in the right directory
    if [[ ! -f "$PROJECT_ROOT/docker-compose.yml" ]]; then
        log_error "docker-compose.yml not found. Please run this script from the project root."
        exit 1
    fi
    
    log_success "All prerequisites met"
}

setup_env_files() {
    log_info "Setting up environment files..."
    
    # Create .env.local if it doesn't exist
    if [[ ! -f "$PROJECT_ROOT/.env.local" ]]; then
        cat > "$PROJECT_ROOT/.env.local" <<EOF
# Local Development Environment Configuration
# Auto-generated by init-dev-env.sh

# Environment
ENVIRONMENT=development
DEBUG=true

# Service URLs (for Kubernetes)
API_GATEWAY_URL=http://api.llmoptimizer.local
AUTH_SERVICE_URL=http://auth-service:8001
BILLING_SERVICE_URL=http://billing-service:8002
NOTIFICATION_SERVICE_URL=http://notification-service:8003
ANALYTICS_SERVICE_URL=http://analytics-service:8004
INTEGRATION_SERVICE_URL=http://integration-service:8005

# Database Configuration
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres123
POSTGRES_DB=llmoptimizer_dev

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=redis123

# RabbitMQ Configuration
RABBITMQ_HOST=rabbitmq
RABBITMQ_PORT=5672
RABBITMQ_USER=admin
RABBITMQ_PASSWORD=admin123
RABBITMQ_VHOST=/

# MongoDB Configuration
MONGODB_HOST=mongodb
MONGODB_PORT=27017
MONGODB_USER=admin
MONGODB_PASSWORD=admin123
MONGODB_DATABASE=llmoptimizer_analytics

# JWT Configuration
JWT_SECRET_KEY=dev-secret-key-change-in-production
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# Local Registry
DOCKER_REGISTRY=${REGISTRY}

# API Keys (Development - Add your own)
OPENAI_API_KEY=
STRIPE_API_KEY=
STRIPE_WEBHOOK_SECRET=
SENDGRID_API_KEY=
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
EOF
        log_success "Created .env.local"
    else
        log_warning ".env.local already exists, skipping"
    fi
}

deploy_infrastructure() {
    log_info "Deploying infrastructure services to Kubernetes..."
    
    # Create ConfigMaps and Secrets from env files
    kubectl create configmap dev-config \
        --from-env-file="$PROJECT_ROOT/.env.local" \
        --namespace=$NAMESPACE \
        --dry-run=client -o yaml | kubectl apply -f -
    
    # Deploy PostgreSQL
    log_info "Deploying PostgreSQL..."
    cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: $NAMESPACE
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: $NAMESPACE
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres123
        - name: POSTGRES_DB
          value: llmoptimizer_dev
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: $NAMESPACE
spec:
  ports:
  - port: 5432
  selector:
    app: postgres
EOF
    
    # Deploy Redis
    log_info "Deploying Redis..."
    cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: $NAMESPACE
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--requirepass", "redis123"]
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: $NAMESPACE
spec:
  ports:
  - port: 6379
  selector:
    app: redis
EOF
    
    # Deploy RabbitMQ
    log_info "Deploying RabbitMQ..."
    cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: $NAMESPACE
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3.12-management-alpine
        ports:
        - containerPort: 5672
        - containerPort: 15672
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: admin
        - name: RABBITMQ_DEFAULT_PASS
          value: admin123
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: $NAMESPACE
spec:
  ports:
  - name: amqp
    port: 5672
  - name: management
    port: 15672
  selector:
    app: rabbitmq
EOF
    
    # Deploy MongoDB
    log_info "Deploying MongoDB..."
    cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: $NAMESPACE
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: admin
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: admin123
        - name: MONGO_INITDB_DATABASE
          value: llmoptimizer_analytics
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: $NAMESPACE
spec:
  ports:
  - port: 27017
  selector:
    app: mongodb
EOF
    
    # Wait for infrastructure to be ready
    log_info "Waiting for infrastructure services to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/postgres -n $NAMESPACE
    kubectl wait --for=condition=available --timeout=300s deployment/redis -n $NAMESPACE
    kubectl wait --for=condition=available --timeout=300s deployment/rabbitmq -n $NAMESPACE
    kubectl wait --for=condition=available --timeout=300s deployment/mongodb -n $NAMESPACE
    
    log_success "Infrastructure services deployed"
}

initialize_databases() {
    log_info "Initializing databases..."
    
    # Wait a bit for services to be fully ready
    sleep 10
    
    # Create database initialization job
    cat <<EOF | kubectl apply -f -
apiVersion: batch/v1
kind: Job
metadata:
  name: db-init-job-$(date +%s)
  namespace: $NAMESPACE
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: db-init
        image: postgres:15-alpine
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Wait for PostgreSQL to be ready
          until PGPASSWORD=postgres123 psql -h postgres -U postgres -c '\q'; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          
          # Create databases for each service
          PGPASSWORD=postgres123 psql -h postgres -U postgres <<SQL
          -- Create databases
          CREATE DATABASE IF NOT EXISTS auth_service;
          CREATE DATABASE IF NOT EXISTS billing_service;
          CREATE DATABASE IF NOT EXISTS notification_service;
          CREATE DATABASE IF NOT EXISTS analytics_service;
          CREATE DATABASE IF NOT EXISTS integration_service;
          
          -- Create test user
          CREATE USER IF NOT EXISTS testuser WITH PASSWORD 'testpass';
          GRANT ALL PRIVILEGES ON DATABASE auth_service TO testuser;
          GRANT ALL PRIVILEGES ON DATABASE billing_service TO testuser;
          GRANT ALL PRIVILEGES ON DATABASE notification_service TO testuser;
          GRANT ALL PRIVILEGES ON DATABASE analytics_service TO testuser;
          GRANT ALL PRIVILEGES ON DATABASE integration_service TO testuser;
          SQL
          
          echo "Databases initialized successfully!"
EOF
    
    # Wait for job to complete
    kubectl wait --for=condition=complete --timeout=60s job -l job-name -n $NAMESPACE || true
    
    log_success "Databases initialized"
}

create_dev_scripts() {
    log_info "Creating development utility scripts..."
    
    # Create scripts directory
    mkdir -p "$PROJECT_ROOT/scripts/dev/utils"
    
    # Create service health check script
    cat > "$PROJECT_ROOT/scripts/dev/utils/check-health.sh" <<'EOF'
#!/bin/bash
# check-health.sh - Check health of all services

NAMESPACE=${1:-llmoptimizer-dev}

echo "Checking service health in namespace: $NAMESPACE"
echo "============================================="

# Check pods
echo -e "\n📦 Pod Status:"
kubectl get pods -n $NAMESPACE

# Check services
echo -e "\n🌐 Service Status:"
kubectl get services -n $NAMESPACE

# Check deployments
echo -e "\n🚀 Deployment Status:"
kubectl get deployments -n $NAMESPACE

# Check ingress
echo -e "\n🔗 Ingress Status:"
kubectl get ingress -n $NAMESPACE

# Check endpoints
echo -e "\n🎯 Service Endpoints:"
for service in $(kubectl get services -n $NAMESPACE -o jsonpath='{.items[*].metadata.name}'); do
    echo -n "$service: "
    kubectl get endpoints $service -n $NAMESPACE -o jsonpath='{.subsets[*].addresses[*].ip}' 2>/dev/null || echo "No endpoints"
    echo
done
EOF
    chmod +x "$PROJECT_ROOT/scripts/dev/utils/check-health.sh"
    
    # Create log viewer script
    cat > "$PROJECT_ROOT/scripts/dev/utils/view-logs.sh" <<'EOF'
#!/bin/bash
# view-logs.sh - View logs from multiple services

NAMESPACE=${1:-llmoptimizer-dev}
SERVICE=${2:-all}

if [[ "$SERVICE" == "all" ]]; then
    echo "Viewing logs from all services in namespace: $NAMESPACE"
    echo "Press Ctrl+C to stop"
    stern ".*" -n $NAMESPACE
else
    echo "Viewing logs from $SERVICE in namespace: $NAMESPACE"
    echo "Press Ctrl+C to stop"
    stern $SERVICE -n $NAMESPACE
fi
EOF
    chmod +x "$PROJECT_ROOT/scripts/dev/utils/view-logs.sh"
    
    # Create port-forward script
    cat > "$PROJECT_ROOT/scripts/dev/utils/port-forward.sh" <<'EOF'
#!/bin/bash
# port-forward.sh - Set up port forwarding for development

NAMESPACE=${1:-llmoptimizer-dev}

echo "Setting up port forwarding for development..."

# PostgreSQL
kubectl port-forward -n $NAMESPACE service/postgres 5432:5432 &
echo "PostgreSQL available at localhost:5432"

# Redis
kubectl port-forward -n $NAMESPACE service/redis 6379:6379 &
echo "Redis available at localhost:6379"

# RabbitMQ
kubectl port-forward -n $NAMESPACE service/rabbitmq 15672:15672 &
echo "RabbitMQ Management UI available at http://localhost:15672"

# MongoDB
kubectl port-forward -n $NAMESPACE service/mongodb 27017:27017 &
echo "MongoDB available at localhost:27017"

echo -e "\nPort forwarding established. Press Ctrl+C to stop all forwards."
wait
EOF
    chmod +x "$PROJECT_ROOT/scripts/dev/utils/port-forward.sh"
    
    # Create database backup script
    cat > "$PROJECT_ROOT/scripts/dev/utils/backup-db.sh" <<'EOF'
#!/bin/bash
# backup-db.sh - Backup development databases

NAMESPACE=${1:-llmoptimizer-dev}
BACKUP_DIR="$PROJECT_ROOT/backups/$(date +%Y%m%d_%H%M%S)"

mkdir -p "$BACKUP_DIR"

echo "Backing up databases to $BACKUP_DIR..."

# Backup PostgreSQL
kubectl exec -n $NAMESPACE deployment/postgres -- pg_dumpall -U postgres > "$BACKUP_DIR/postgres_backup.sql"
echo "PostgreSQL backup completed"

# Backup MongoDB
kubectl exec -n $NAMESPACE deployment/mongodb -- mongodump --archive --gzip -u admin -p admin123 > "$BACKUP_DIR/mongodb_backup.gz"
echo "MongoDB backup completed"

echo "Backup completed successfully!"
EOF
    chmod +x "$PROJECT_ROOT/scripts/dev/utils/backup-db.sh"
    
    log_success "Development utility scripts created"
}

setup_vscode_config() {
    log_info "Setting up VS Code configuration..."
    
    # Create .vscode directory
    mkdir -p "$PROJECT_ROOT/.vscode"
    
    # Create workspace settings
    cat > "$PROJECT_ROOT/.vscode/settings.json" <<'EOF'
{
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": false,
    "python.linting.flake8Enabled": true,
    "python.linting.mypyEnabled": true,
    "python.formatting.provider": "black",
    "python.testing.pytestEnabled": true,
    "python.testing.unittestEnabled": false,
    "python.envFile": "${workspaceFolder}/.env.local",
    "go.useLanguageServer": true,
    "go.lintTool": "golangci-lint",
    "go.lintOnSave": "package",
    "go.formatTool": "goimports",
    "go.testOnSave": false,
    "[python]": {
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
            "source.organizeImports": true
        }
    },
    "[go]": {
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
            "source.organizeImports": true
        }
    },
    "files.exclude": {
        "**/__pycache__": true,
        "**/*.pyc": true,
        "**/.pytest_cache": true,
        "**/.mypy_cache": true
    },
    "kubernetes.enable": true,
    "kubernetes.kubectl.path": "kubectl",
    "docker.showExplorer": true,
    "yaml.schemas": {
        "kubernetes": "k8s/*.yaml"
    }
}
EOF
    
    # Create extensions recommendations
    cat > "$PROJECT_ROOT/.vscode/extensions.json" <<'EOF'
{
    "recommendations": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-python.black-formatter",
        "golang.go",
        "ms-kubernetes-tools.vscode-kubernetes-tools",
        "ms-azuretools.vscode-docker",
        "redhat.vscode-yaml",
        "ms-vscode.makefile-tools",
        "streetsidesoftware.code-spell-checker",
        "dbaeumer.vscode-eslint",
        "esbenp.prettier-vscode",
        "eamodio.gitlens",
        "mhutchie.git-graph",
        "humao.rest-client",
        "rangav.vscode-thunder-client",
        "42crunch.vscode-openapi",
        "hashicorp.terraform",
        "ms-vscode.vscode-typescript-next"
    ]
}
EOF
    
    # Create launch.json for debugging
    cat > "$PROJECT_ROOT/.vscode/launch.json" <<'EOF'
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Python: Auth Service",
            "type": "python",
            "request": "launch",
            "module": "uvicorn",
            "args": [
                "src.auth_service.main:app",
                "--reload",
                "--host", "0.0.0.0",
                "--port", "8001"
            ],
            "jinja": true,
            "envFile": "${workspaceFolder}/.env.local",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Python: Billing Service",
            "type": "python",
            "request": "launch",
            "module": "uvicorn",
            "args": [
                "src.billing_service.main:app",
                "--reload",
                "--host", "0.0.0.0",
                "--port", "8002"
            ],
            "jinja": true,
            "envFile": "${workspaceFolder}/.env.local",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Python: Notification Service",
            "type": "python",
            "request": "launch",
            "module": "uvicorn",
            "args": [
                "src.notification_service.main:app",
                "--reload",
                "--host", "0.0.0.0",
                "--port", "8003"
            ],
            "jinja": true,
            "envFile": "${workspaceFolder}/.env.local",
            "cwd": "${workspaceFolder}"
        },
        {
            "name": "Go: API Gateway",
            "type": "go",
            "request": "launch",
            "mode": "debug",
            "program": "${workspaceFolder}/src/api_gateway",
            "envFile": "${workspaceFolder}/.env.local"
        },
        {
            "name": "Go: Analytics Service",
            "type": "go",
            "request": "launch",
            "mode": "debug",
            "program": "${workspaceFolder}/src/analytics_service",
            "envFile": "${workspaceFolder}/.env.local"
        },
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "envFile": "${workspaceFolder}/.env.local"
        },
        {
            "name": "Python: Debug Tests",
            "type": "python",
            "request": "launch",
            "module": "pytest",
            "args": ["-v", "-s", "${file}"],
            "console": "integratedTerminal",
            "envFile": "${workspaceFolder}/.env.local"
        },
        {
            "name": "Attach to Kubernetes Pod",
            "type": "python",
            "request": "attach",
            "port": 5678,
            "host": "localhost",
            "pathMappings": [
                {
                    "localRoot": "${workspaceFolder}",
                    "remoteRoot": "/app"
                }
            ]
        }
    ],
    "compounds": [
        {
            "name": "All Services",
            "configurations": [
                "Python: Auth Service",
                "Python: Billing Service",
                "Python: Notification Service",
                "Go: API Gateway",
                "Go: Analytics Service"
            ],
            "stopAll": true
        }
    ]
}
EOF
    
    log_success "VS Code configuration created"
}

create_makefile() {
    log_info "Creating development Makefile..."
    
    cat > "$PROJECT_ROOT/Makefile" <<'EOF'
# LLMOptimizer Development Makefile

.PHONY: help
help:
	@echo "LLMOptimizer Development Commands:"
	@echo "  make install          - Install all development tools"
	@echo "  make setup-k8s        - Set up local Kubernetes cluster"
	@echo "  make init             - Initialize complete dev environment"
	@echo "  make build            - Build all Docker images"
	@echo "  make deploy           - Deploy to local Kubernetes"
	@echo "  make test             - Run all tests"
	@echo "  make logs             - View logs from all services"
	@echo "  make health           - Check service health"
	@echo "  make clean            - Clean up resources"
	@echo "  make port-forward     - Set up port forwarding"

.PHONY: install
install:
	@./scripts/dev/install-dev-tools.sh

.PHONY: setup-k8s
setup-k8s:
	@./scripts/dev/setup-local-k8s.sh

.PHONY: init
init:
	@./scripts/dev/init-dev-env.sh

.PHONY: build
build:
	@echo "Building all Docker images..."
	@docker-compose build

.PHONY: push
push:
	@echo "Pushing images to local registry..."
	@docker-compose push

.PHONY: deploy
deploy: build push
	@echo "Deploying to Kubernetes..."
	@kubectl apply -f k8s/dev/

.PHONY: test
test:
	@echo "Running tests..."
	@pytest tests/ -v
	@go test ./... -v

.PHONY: test-integration
test-integration:
	@echo "Running integration tests..."
	@pytest tests/integration/ -v --tb=short

.PHONY: lint
lint:
	@echo "Running linters..."
	@flake8 src/
	@mypy src/
	@golangci-lint run

.PHONY: format
format:
	@echo "Formatting code..."
	@black src/
	@goimports -w src/

.PHONY: logs
logs:
	@./scripts/dev/utils/view-logs.sh

.PHONY: health
health:
	@./scripts/dev/utils/check-health.sh

.PHONY: port-forward
port-forward:
	@./scripts/dev/utils/port-forward.sh

.PHONY: backup
backup:
	@./scripts/dev/utils/backup-db.sh

.PHONY: clean
clean:
	@echo "Cleaning up resources..."
	@kubectl delete namespace llmoptimizer-dev --ignore-not-found
	@docker-compose down -v

.PHONY: reset
reset: clean init
	@echo "Environment reset complete"
EOF
    
    log_success "Makefile created"
}

create_developer_docs() {
    log_info "Creating developer documentation..."
    
    # Create docs directory
    mkdir -p "$PROJECT_ROOT/docs/development"
    
    # Create developer onboarding guide
    cat > "$PROJECT_ROOT/docs/development/ONBOARDING.md" <<'EOF'
# LLMOptimizer Developer Onboarding Guide

Welcome to the LLMOptimizer development team! This guide will help you set up your development environment and get started with the project.

## Prerequisites

Before you begin, ensure you have the following:

- macOS or Linux (Ubuntu 20.04+ recommended)
- Docker Desktop installed and running
- At least 8GB of free RAM
- 20GB of free disk space
- Basic knowledge of Kubernetes and microservices

## Quick Start

1. **Clone the repository:**
   ```bash
   git clone https://github.com/your-org/llmoptimizer.git
   cd llmoptimizer
   ```

2. **Install development tools:**
   ```bash
   ./scripts/dev/install-dev-tools.sh
   ```

3. **Set up local Kubernetes:**
   ```bash
   ./scripts/dev/setup-local-k8s.sh
   ```

4. **Initialize development environment:**
   ```bash
   ./scripts/dev/init-dev-env.sh
   ```

5. **Verify installation:**
   ```bash
   make health
   ```

## Project Structure

```
llmoptimizer/
├── src/                    # Source code
│   ├── api_gateway/       # Go API Gateway
│   ├── auth_service/      # Python Auth Service
│   ├── billing_service/   # Python Billing Service
│   ├── notification_service/ # Python Notification Service
│   ├── analytics_service/ # Go Analytics Service
│   └── integration_service/ # Python Integration Service
├── k8s/                   # Kubernetes manifests
│   ├── base/             # Base configurations
│   ├── dev/              # Development overrides
│   └── prod/             # Production configurations
├── scripts/              # Utility scripts
│   └── dev/             # Development scripts
├── tests/               # Test suites
│   ├── unit/           # Unit tests
│   ├── integration/    # Integration tests
│   └── e2e/           # End-to-end tests
└── docs/               # Documentation
```

## Development Workflow

### 1. Starting Your Day

```bash
# Start local Kubernetes if not running
minikube start -p llmoptimizer-dev

# Check service health
make health

# Set up port forwarding for databases
make port-forward
```

### 2. Making Changes

1. Create a feature branch:
   ```bash
   git checkout -b feature/your-feature-name
   ```

2. Make your changes in the appropriate service directory

3. Run tests locally:
   ```bash
   make test
   ```

4. Build and deploy to local cluster:
   ```bash
   make deploy
   ```

### 3. Debugging

- **View logs:** `make logs` or `stern <service-name> -n llmoptimizer-dev`
- **Debug in VS Code:** Use the provided launch configurations
- **Access databases:** Use port forwarding and connect to localhost
- **Kubernetes dashboard:** `minikube dashboard -p llmoptimizer-dev`

### 4. Testing

Run different test suites:
```bash
# All tests
make test

# Unit tests only
pytest tests/unit/

# Integration tests
make test-integration

# Specific service tests
pytest tests/unit/auth_service/
```

## Local Services

After initialization, the following services are available:

| Service | Local URL | Purpose |
|---------|-----------|---------|
| API Gateway | http://api.llmoptimizer.local | Main entry point |
| Auth Service | http://auth.llmoptimizer.local | Authentication |
| Billing Service | http://billing.llmoptimizer.local | Payment processing |
| PostgreSQL | localhost:5432 | Main database |
| Redis | localhost:6379 | Cache & sessions |
| RabbitMQ | localhost:15672 | Message queue UI |
| MongoDB | localhost:27017 | Analytics data |

## Environment Variables

Key environment variables are stored in `.env.local`. Never commit this file!

Important variables:
- `ENVIRONMENT`: Set to "development" for local dev
- `DEBUG`: Enable debug logging
- `JWT_SECRET_KEY`: Used for authentication
- Database credentials (see `.env.local`)

## Common Tasks

### Adding a New API Endpoint

1. Define the endpoint in the appropriate service
2. Update API documentation
3. Add tests
4. Update the API Gateway routing if needed

### Database Migrations

```bash
# Create a new migration
alembic revision -m "Description of change"

# Apply migrations
alembic upgrade head

# Rollback
alembic downgrade -1
```

### Adding Dependencies

**Python services:**
```bash
cd src/service_name
pip install new-package
pip freeze > requirements.txt
```

**Go services:**
```bash
cd src/service_name
go get github.com/some/package
go mod tidy
```

## Troubleshooting

### Kubernetes cluster issues
```bash
# Reset Minikube
minikube delete -p llmoptimizer-dev
./scripts/dev/setup-local-k8s.sh
```

### Port conflicts
Check for processes using required ports:
```bash
lsof -i :5432  # PostgreSQL
lsof -i :6379  # Redis
lsof -i :8080  # API Gateway
```

### Docker issues
```bash
# Clean up Docker resources
docker system prune -a
docker volume prune
```

## Getting Help

- Check the [Troubleshooting Guide](./TROUBLESHOOTING.md)
- Ask in the #dev-help Slack channel
- Review existing issues on GitHub
- Consult the [Architecture Guide](./ARCHITECTURE.md)

## Next Steps

1. Review the [API Documentation](../api/README.md)
2. Explore the codebase starting with the API Gateway
3. Pick a starter issue from GitHub
4. Join the weekly dev sync meeting

Welcome aboard! 🚀
EOF
    
    # Create troubleshooting guide
    cat > "$PROJECT_ROOT/docs/development/TROUBLESHOOTING.md" <<'EOF'
# LLMOptimizer Troubleshooting Guide

This guide covers common issues and their solutions.

## Installation Issues

### Docker Desktop not starting (macOS)

**Problem:** Docker Desktop fails to start or crashes immediately.

**Solutions:**
1. Reset Docker Desktop to factory defaults
2. Ensure virtualization is enabled in BIOS
3. Reinstall Docker Desktop
4. Check for conflicting virtualization software

### Homebrew installation fails (macOS)

**Problem:** Homebrew installation script fails.

**Solutions:**
1. Install Xcode Command Line Tools: `xcode-select --install`
2. Check permissions: `sudo chown -R $(whoami) /usr/local`
3. Try manual installation from https://brew.sh

## Kubernetes Issues

### Minikube won't start

**Problem:** `minikube start` fails with various errors.

**Solutions:**

1. **Insufficient resources:**
   ```bash
   minikube delete -p llmoptimizer-dev
   minikube start -p llmoptimizer-dev --memory=4096 --cpus=2
   ```

2. **Docker driver issues:**
   ```bash
   minikube config set driver docker
   minikube delete
   minikube start
   ```

3. **VPN conflicts:**
   - Disconnect from VPN
   - Start Minikube
   - Reconnect to VPN if needed

### Pods stuck in Pending state

**Problem:** Pods remain in Pending status indefinitely.

**Solutions:**

1. **Check node resources:**
   ```bash
   kubectl describe nodes
   kubectl top nodes
   ```

2. **Check PersistentVolumeClaims:**
   ```bash
   kubectl get pvc -n llmoptimizer-dev
   kubectl describe pvc <pvc-name> -n llmoptimizer-dev
   ```

3. **Check pod events:**
   ```bash
   kubectl describe pod <pod-name> -n llmoptimizer-dev
   ```

### Service connection refused

**Problem:** Cannot connect to services via localhost.

**Solutions:**

1. **Check port forwarding:**
   ```bash
   # Kill existing port forwards
   pkill -f "kubectl port-forward"
   
   # Restart port forwarding
   make port-forward
   ```

2. **Check service endpoints:**
   ```bash
   kubectl get endpoints -n llmoptimizer-dev
   ```

3. **Verify service is running:**
   ```bash
   kubectl get pods -n llmoptimizer-dev
   kubectl logs <pod-name> -n llmoptimizer-dev
   ```

## Database Issues

### PostgreSQL connection failed

**Problem:** Cannot connect to PostgreSQL database.

**Solutions:**

1. **Check if pod is running:**
   ```bash
   kubectl get pod -l app=postgres -n llmoptimizer-dev
   ```

2. **Check credentials:**
   ```bash
   # Verify environment variables
   kubectl exec -it deployment/postgres -n llmoptimizer-dev -- env | grep POSTGRES
   ```

3. **Test connection:**
   ```bash
   kubectl exec -it deployment/postgres -n llmoptimizer-dev -- psql -U postgres
   ```

### Redis authentication failed

**Problem:** Redis returns authentication error.

**Solutions:**

1. **Verify password:**
   ```bash
   kubectl get secret redis-secret -n llmoptimizer-dev -o yaml
   ```

2. **Test connection:**
   ```bash
   kubectl exec -it deployment/redis -n llmoptimizer-dev -- redis-cli -a redis123 ping
   ```

## Service Issues

### Service won't start

**Problem:** Service crashes on startup.

**Solutions:**

1. **Check logs:**
   ```bash
   kubectl logs deployment/<service-name> -n llmoptimizer-dev --tail=100
   ```

2. **Check environment variables:**
   ```bash
   kubectl exec deployment/<service-name> -n llmoptimizer-dev -- env
   ```

3. **Verify dependencies:**
   - Database connections
   - External service APIs
   - Required secrets/configmaps

### Hot reload not working

**Problem:** Code changes don't reflect in running services.

**Solutions:**

1. **For Python services:**
   - Ensure volume mounts are correct
   - Check if `--reload` flag is set
   - Restart the pod if necessary

2. **For Go services:**
   - Use `air` for hot reload
   - Or manually rebuild and redeploy

## Network Issues

### Cannot access *.llmoptimizer.local domains

**Problem:** Local domains return "cannot resolve host".

**Solutions:**

1. **Check /etc/hosts:**
   ```bash
   cat /etc/hosts | grep llmoptimizer
   ```

2. **Add missing entries:**
   ```bash
   sudo echo "127.0.0.1 api.llmoptimizer.local" >> /etc/hosts
   ```

3. **For Minikube, use correct IP:**
   ```bash
   echo "$(minikube ip -p llmoptimizer-dev) api.llmoptimizer.local" | sudo tee -a /etc/hosts
   ```

### Ingress not working

**Problem:** Ingress routes don't work as expected.

**Solutions:**

1. **Check ingress controller:**
   ```bash
   kubectl get pods -n ingress-nginx
   ```

2. **Verify ingress resources:**
   ```bash
   kubectl get ingress -n llmoptimizer-dev
   kubectl describe ingress -n llmoptimizer-dev
   ```

3. **Check service selectors:**
   ```bash
   kubectl get svc -n llmoptimizer-dev -o wide
   ```

## Performance Issues

### Slow build times

**Problem:** Docker builds take too long.

**Solutions:**

1. **Use build cache:**
   ```bash
   docker buildx build --cache-from type=local,src=/tmp/.buildx-cache .
   ```

2. **Optimize Dockerfiles:**
   - Order layers from least to most frequently changing
   - Use multi-stage builds
   - Minimize layer count

3. **Use local registry:**
   ```bash
   docker tag myimage localhost:5000/myimage
   docker push localhost:5000/myimage
   ```

### High memory usage

**Problem:** Development environment uses too much RAM.

**Solutions:**

1. **Limit Minikube resources:**
   ```bash
   minikube config set memory 2048
   minikube config set cpus 2
   ```

2. **Scale down replicas:**
   ```bash
   kubectl scale deployment --replicas=0 <unused-service> -n llmoptimizer-dev
   ```

3. **Use Kind instead of Minikube:**
   ```bash
   ./scripts/dev/setup-local-k8s.sh kind
   ```

## IDE Issues

### VS Code debugger not connecting

**Problem:** Debugger fails to attach to running service.

**Solutions:**

1. **Check debug port:**
   ```bash
   kubectl port-forward deployment/<service> 5678:5678 -n llmoptimizer-dev
   ```

2. **Verify debugpy is installed:**
   ```python
   # Add to requirements.txt
   debugpy==1.6.7
   ```

3. **Add debug configuration to service:**
   ```python
   import debugpy
   debugpy.listen(("0.0.0.0", 5678))
   # debugpy.wait_for_client()  # Optional: wait for debugger
   ```

## Quick Fixes

### Reset everything
```bash
make reset
```

### Clean Docker system
```bash
docker system prune -a --volumes
```

### Restart Kubernetes cluster
```bash
minikube stop -p llmoptimizer-dev
minikube start -p llmoptimizer-dev
```

### Force delete stuck namespace
```bash
kubectl delete namespace llmoptimizer-dev --force --grace-period=0
```

## Still Need Help?

1. Check service logs: `kubectl logs -f deployment/<service> -n llmoptimizer-dev`
2. Describe problematic resources: `kubectl describe <resource-type> <resource-name> -n llmoptimizer-dev`
3. Join #dev-help Slack channel
4. Create a GitHub issue with:
   - Error messages
   - Steps to reproduce
   - Environment details (OS, versions)
   - What you've already tried
EOF
    
    log_success "Developer documentation created"
}

create_api_testing_collection() {
    log_info "Creating API testing collection..."
    
    # Create Postman collection
    mkdir -p "$PROJECT_ROOT/tests/api"
    
    cat > "$PROJECT_ROOT/tests/api/llmoptimizer.postman_collection.json" <<'EOF'
{
    "info": {
        "name": "LLMOptimizer API",
        "description": "API collection for LLMOptimizer development",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
        {
            "key": "base_url",
            "value": "http://api.llmoptimizer.local",
            "type": "string"
        },
        {
            "key": "auth_token",
            "value": "",
            "type": "string"
        }
    ],
    "item": [
        {
            "name": "Auth",
            "item": [
                {
                    "name": "Register",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"testpass123\",\n    \"full_name\": \"Test User\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/auth/register",
                            "host": ["{{base_url}}"],
                            "path": ["api", "v1", "auth", "register"]
                        }
                    }
                },
                {
                    "name": "Login",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "if (pm.response.code === 200) {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.collectionVariables.set(\"auth_token\", jsonData.access_token);",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"testpass123\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/auth/login",
                            "host": ["{{base_url}}"],
                            "path": ["api", "v1", "auth", "login"]
                        }
                    }
                },
                {
                    "name": "Get Profile",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/auth/profile",
                            "host": ["{{base_url}}"],
                            "path": ["api", "v1", "auth", "profile"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Billing",
            "item": [
                {
                    "name": "Get Subscription",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/billing/subscription",
                            "host": ["{{base_url}}"],
                            "path": ["api", "v1", "billing", "subscription"]
                        }
                    }
                },
                {
                    "name": "Create Subscription",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"plan_id\": \"pro_monthly\",\n    \"payment_method_id\": \"pm_test_123\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/billing/subscription",
                            "host": ["{{base_url}}"],
                            "path": ["api", "v1", "billing", "subscription"]
                        }
                    }
                }
            ]
        },
        {
            "name": "Analytics",
            "item": [
                {
                    "name": "Get Usage Stats",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/analytics/usage?period=month",
                            "host": ["{{base_url}}"],
                            "path": ["api", "v1", "analytics", "usage"],
                            "query": [
                                {
                                    "key": "period",
                                    "value": "month"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "Health",
            "item": [
                {
                    "name": "Health Check",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{base_url}}/health",
                            "host": ["{{base_url}}"],
                            "path": ["health"]
                        }
                    }
                },
                {
                    "name": "Readiness",
                    "request": {
                        "method": "GET",
                        "url": {
                            "raw": "{{base_url}}/ready",
                            "host": ["{{base_url}}"],
                            "path": ["ready"]
                        }
                    }
                }
            ]
        }
    ]
}
EOF
    
    # Create HTTPie examples
    cat > "$PROJECT_ROOT/tests/api/httpie-examples.sh" <<'EOF'
#!/bin/bash
# HTTPie examples for testing LLMOptimizer API

BASE_URL="http://api.llmoptimizer.local"

# Health check
http GET $BASE_URL/health

# Register new user
http POST $BASE_URL/api/v1/auth/register \
    email="test@example.com" \
    password="testpass123" \
    full_name="Test User"

# Login
TOKEN=$(http POST $BASE_URL/api/v1/auth/login \
    email="test@example.com" \
    password="testpass123" | jq -r '.access_token')

# Get profile with auth
http GET $BASE_URL/api/v1/auth/profile \
    "Authorization: Bearer $TOKEN"

# Get usage analytics
http GET $BASE_URL/api/v1/analytics/usage \
    "Authorization: Bearer $TOKEN" \
    period==month
EOF
    chmod +x "$PROJECT_ROOT/tests/api/httpie-examples.sh"
    
    log_success "API testing collection created"
}

print_summary() {
    echo
    echo "========================================="
    echo "Development Environment Setup Complete!"
    echo "========================================="
    echo
    echo "✅ Environment files created"
    echo "✅ Infrastructure services deployed"
    echo "✅ Databases initialized"
    echo "✅ Development scripts created"
    echo "✅ VS Code configuration set up"
    echo "✅ Documentation generated"
    echo "✅ API testing collection created"
    echo
    echo "Quick Commands:"
    echo "  make health         - Check service health"
    echo "  make logs          - View service logs"
    echo "  make port-forward  - Access databases locally"
    echo "  make test          - Run tests"
    echo "  make deploy        - Deploy changes"
    echo
    echo "VS Code:"
    echo "  - Open the project in VS Code"
    echo "  - Install recommended extensions"
    echo "  - Use debug configurations for each service"
    echo
    echo "Next Steps:"
    echo "  1. Review docs/development/ONBOARDING.md"
    echo "  2. Import tests/api/llmoptimizer.postman_collection.json to Postman"
    echo "  3. Start coding! 🚀"
    echo "========================================="
}

# Main execution
main() {
    log_info "Initializing LLMOptimizer development environment..."
    
    # Check prerequisites
    check_prerequisites
    
    # Set up environment
    setup_env_files
    
    # Deploy infrastructure
    deploy_infrastructure
    
    # Initialize databases
    initialize_databases
    
    # Create development tools
    create_dev_scripts
    setup_vscode_config
    create_makefile
    create_developer_docs
    create_api_testing_collection
    
    # Print summary
    print_summary
}

# Run main function
main "$@"