# Secrets Management Configuration
# Using Kubernetes Secrets with encryption at rest
---
# Secret encryption configuration (to be applied at cluster level)
apiVersion: v1
kind: ConfigMap
metadata:
  name: encryption-config
  namespace: kube-system
data:
  encryption-config.yaml: |
    apiVersion: apiserver.config.k8s.io/v1
    kind: EncryptionConfiguration
    resources:
      - resources:
          - secrets
        providers:
          - aescbc:
              keys:
                - name: key1
                  secret: <base64-encoded-32-byte-key>
          - identity: {}

---
# External Secrets Operator for integrating with external secret stores
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: llmoptimizer
spec:
  provider:
    vault:
      server: "https://vault.llmoptimizer.internal:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "llmoptimizer"
          serviceAccountRef:
            name: "external-secrets"

---
# Example ExternalSecret for database credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: llmoptimizer
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: database-secret
    creationPolicy: Owner
  data:
  - secretKey: postgresql-password
    remoteRef:
      key: database/postgresql
      property: password
  - secretKey: mongodb-password
    remoteRef:
      key: database/mongodb
      property: password
  - secretKey: redis-password
    remoteRef:
      key: database/redis
      property: password

---
# ExternalSecret for API keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: api-keys
  namespace: llmoptimizer
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: llm-api-keys
    creationPolicy: Owner
  data:
  - secretKey: openai-api-key
    remoteRef:
      key: api-keys/openai
      property: key
  - secretKey: anthropic-api-key
    remoteRef:
      key: api-keys/anthropic
      property: key
  - secretKey: google-api-key
    remoteRef:
      key: api-keys/google
      property: key
  - secretKey: perplexity-api-key
    remoteRef:
      key: api-keys/perplexity
      property: key

---
# Sealed Secrets for GitOps
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: jwt-secret
  namespace: llmoptimizer
spec:
  encryptedData:
    jwt-private-key: AgBvFxO... # Encrypted with cluster public key
    jwt-public-key: AgCmPqR... # Encrypted with cluster public key
  template:
    metadata:
      name: jwt-secret
      namespace: llmoptimizer
    type: Opaque

---
# Secret rotation CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation
  namespace: llmoptimizer
spec:
  schedule: "0 2 * * 0" # Weekly on Sunday at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: secret-rotator
          containers:
          - name: rotator
            image: llmoptimizer/secret-rotator:latest
            env:
            - name: ROTATION_STRATEGY
              value: "automatic"
            - name: SECRET_TYPES
              value: "jwt,api-keys,database"
            command:
            - /bin/sh
            - -c
            - |
              # Rotate JWT keys
              kubectl create secret generic jwt-secret-new \
                --from-literal=jwt-private-key=$(openssl genrsa 4096) \
                --from-literal=jwt-public-key=$(openssl rsa -pubout)
              
              # Update deployments to use new secret
              kubectl patch deployment auth-service \
                -p '{"spec":{"template":{"spec":{"volumes":[{"name":"jwt-keys","secret":{"secretName":"jwt-secret-new"}}]}}}}'
              
              # Delete old secret after grace period
              sleep 300
              kubectl delete secret jwt-secret
              kubectl create secret generic jwt-secret --from=secret/jwt-secret-new
          restartPolicy: OnFailure

---
# ServiceAccount for secret rotation
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-rotator
  namespace: llmoptimizer

---
# Role for secret rotation
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-rotator
  namespace: llmoptimizer
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "update", "patch", "delete", "get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["patch", "get", "list"]

---
# RoleBinding for secret rotation
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-rotator
  namespace: llmoptimizer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-rotator
subjects:
- kind: ServiceAccount
  name: secret-rotator
  namespace: llmoptimizer

---
# Certificate management with cert-manager
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: llmoptimizer-tls
  namespace: llmoptimizer
spec:
  secretName: llmoptimizer-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: api.llmoptimizer.com
  dnsNames:
  - api.llmoptimizer.com
  - "*.llmoptimizer.com"
  duration: 8760h # 1 year
  renewBefore: 720h # 30 days

---
# ClusterIssuer for Let's Encrypt
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: security@llmoptimizer.com
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers:
    - http01:
        ingress:
          class: nginx
    - dns01:
        cloudDNS:
          project: llmoptimizer-project
          serviceAccountSecretRef:
            name: clouddns-dns01-solver
            key: key.json